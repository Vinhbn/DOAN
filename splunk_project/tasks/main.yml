---
# tasks file for splunk_project
#create group
# - name: Add-group
#   ansible.builtin.group: 
#     name: "{{ os_group }}"
#     state: present  
#   become: true

# #create user
# - name: Add "{{ os_user }}" user with the home dir /home/{{ os_user }}/
#   ansible.builtin.user:
#     name: "{{ os_user }}"
#     group: "{{ os_group }}"
#     home: /home/{{ os_user }}/
#     shell: /bin/bash
#     comment: Splunk User
#   become: true

# #home dir for Splunk
# - name: Create "{{ splunk_home }}" dir
#   ansible.builtin.file:
#     path: "{{ splunk_home }}"
#     state: directory
#     mode: '0755'  
#     owner: "{{ os_user }}"
#     group: "{{ os_group }}"
#   become: true
  
# #check directory exist?
# - name: Check if dir /home/{{ os_user }}/{{ splunk_tgz }} exists?
#   ansible.builtin.stat:
#     path: /home/{{ os_user }}/{{ splunk_tgz }}
#     get_checksum: true  
#     checksum_algorithm: md5
#   register: splunk_tgz_downloaded_flag
#   become: true

# #start download
# - name: Download by wget {{ splunk_tgz }}
#   ansible.builtin.get_url:
#     url: "https://download.splunk.com/products/splunk/releases/{{ splunk_version }}/linux/{{ splunk_tgz }}"
#     checksum: "md5:{{ splunk_tgz_checksum }}"
#     dest: /home/{{ os_user }}
#     mode: '0640'  
#     owner: "{{ os_user }}"
#     group: "{{ os_group }}"
#   become: true
#   #if splunk not be download-> start download
#   when: splunk_tgz_downloaded_flag.stat.exists == False and download_tgz_from_splunk_servers 

# #send file
# - name: send ./files/{{ splunk_tgz }} to /home/{{ os_user }}
#   ansible.builtin.copy:
#     src: "files/{{ splunk_tgz }}"
#     dest: /home/{{ os_user }}
#     mode: '0640'
#     owner: "{{ os_user }}"
#     group: "{{ os_group }}"
#   become: true
#   when: splunk_tgz_downloaded_flag.stat.exists == False and not download_tgz_from_splunk_servers  

# #extract file
# - name: extract tgz file
#   ansible.builtin.unarchive:
#     src: /home/{{ os_user }}/{{ splunk_tgz }}
#     dest: "{{ splunk_base_path }}"
#     remote_src: true
#     owner: "{{ os_user }}"
#     group: "{{ os_group }}"
#   become: true

# #symlink
# - name: "Create symlink to splunk in /usr/local/bin"
#   ansible.builtin.file:
#     src: "{{ splunk_home }}/bin/splunk"
#     path: /usr/local/bin/splunk
#     state: link
#     owner: "{{ os_user }}"
#     group: "{{ os_group }}"
#   become: true

#create default admin credential
- name: Create file for default admin creds
  ansible.builtin.template:
    src: "{{ default_admin_cred }}"
    dest: "{{ splunk_home }}/etc/system/local/user-seed.conf"
  become: true

- name: "-.ui_login- Touch {{ splunk_home }}/etc/.ui_login"
  ansible.builtin.file:
    path: "{{ splunk_home }}/etc/.ui_login"
    state: touch
    mode: '0644'
    owner: "{{ os_user }}"
    group: "{{ os_group }}"
  become: true   

#set recursively splunk home
- name: Set {{ splunk_home }} owner & group recursively
  ansible.builtin.file:
    path: "{{ splunk_home }}"
    state: directory
    owner: "{{ os_user }}"
    group: "{{ os_group }}"
    recurse: true
  become: true  

#check if splunk systemd unit is existed?
- name: Ensure default Splunk systemd unit file does not already exist
  ansible.builtin.file:
    path: /etc/systemd/system/Splunkd.service
    state: absent
  become: true

#enable boot start splunk
- name: -systemd & Splunk 8.1.1 or later- Splunk enable boot-start (-systemd-managed 1) (-create-polkit-rules 1)
  ansible.builtin.raw: "{{ splunk_home }}/bin/splunk enable boot-start -systemd-managed 1 -create-polkit-rules 1 -user {{ os_user }} --no-prompt --answer-true --accept-license"
  become: true 
  when:
    - install_method == "systemd" 
    - splunk_version is version('8.1.1', '>=')
  tags: tests 
#fix bug
- name: -systemd & Ubuntu- Fix the /etc/systemd/system/Splunkd.service file for Ubuntu support
  ansible.builtin.replace:
    path: /etc/systemd/system/Splunkd.service
    regexp: '\/init.scope'
    replace: ''
  become: true 
  when: 
    - install_method == "systemd"  
    - ansible_distribution == "Ubuntu"  


#reload daemon
- name: -systemd & Ubuntu- After Splunkd.service update reload the systemd daemon units
  ansible.builtin.command: systemctl daemon-reload
  become: true
  when: 
    - install_method == "systemd"  
    - ansible_distribution == "Ubuntu"    


#start first time
- name: -systemd- Start Splunk for the first time
  ansible.builtin.command: "systemctl start Splunkd"
  become: true
  when: 
    - install_method == "systemd"


